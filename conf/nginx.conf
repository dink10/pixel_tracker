####################################################################
# Copyright 2014 - Rick Crawford - https://github.com/rickcrawford
####################################################################

#user      			www www;  ## Default: nobody
#worker_processes  	1;  ## Default: 1
error_log  			logs/error.log;
pid        			logs/nginx.pid;

# Number of file descriptors used for Nginx. This is set in the OS with 'ulimit -n 200000'
# or using /etc/security/limits.conf
#worker_rlimit_nofile 200000;



events {
    worker_connections  4096;
    
    # Accept as many connections as possible, after nginx gets notification about a new connection.
	# May flood worker_connections, if that option is set too low.
	multi_accept on;    
}
http {
    server_tokens off;
    include	mime.types;
    include	proxy.conf;
 
    #lua configuration settings
    lua_package_path '$prefix/conf/?.lua;;';
    
    #initialize our globals
	init_by_lua_file 'conf/init.lua';

	client_body_temp_path tmp/client_body_temp;
	proxy_temp_path tmp/proxy_temp;
	fastcgi_temp_path tmp/fastcgi_temp;
	uwsgi_temp_path tmp/uwsgi_temp;
	scgi_temp_path tmp/scgi_temp;
	
	

	log_format main '$msec\t$uuid\t$id\t$hostname\t$remote_addr\t$remote_user\t$request\t$status\t$account\t'
					 '$scheme\t$http_host\t$request_uri\t$http_if_modified_since\t$http_if_none_match\t'
					 '$http_dnt\t$http_referer\t$http_user_agent\t$http_accept\t$http_accept_encoding\t'
					 '$http_accept_language\t$http_cookie\t$http_x_forwarded_for\t$request_body\t'
					 '$query_string\t$echo_client_request_headers\t$type';
					 
	# this seems to be required for some vhosts
	server_names_hash_bucket_size 128; 
	
	# Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, 
	# instead of using partial frames. This is useful for prepending headers before calling sendfile, 
	# or for throughput optimization.
	tcp_nopush on;
	 
	 
	# don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
	tcp_nodelay on; 
	 
	# Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;
	 
	# Number of requests a client can make over the keep-alive connection. This is set high for testing.
	keepalive_requests 1000;
	 
	# allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
	reset_timedout_connection on;
	 
	# send the client a "request timed out" if the body is not loaded by this time. Default 60.
	client_body_timeout 10;
	 
	# If the client stops reading data, free up the stale client connection after this much time. Default 60.
	send_timeout 2;
	 
	# Compression. Reduces the amount of data that needs to be transferred over the network
	## Compression
	gzip              on;
	gzip_buffers      16 8k;
	gzip_comp_level   4;
	gzip_http_version 1.0;
	gzip_min_length   1280;
	gzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;
	gzip_vary         on;
	gzip_disable 	  "MSIE [1-6]\.";
	

	#beacon server....
    server {

		listen       	80;
    	merge_slashes	off;

    	error_page 403 404 405 @nolog;
		
		set $type 'image';
		set $id '-';
		set_by_lua $uuid "return common.get_uuid()";
    
    	log_not_found off;
		access_log logs/access.log main;
		error_log logs/error.log debug;


		#define you virtual host name... if testing local make sure your host 
		# file is updated
    	server_name ~^(?<account>[0-9a-z]+)\.localhost$;
		
		
		#rewrite rules for convenience
		rewrite ^/p.gif$ /pixel.gif break;
		rewrite ^/e.gif$ /empty.gif break;
		rewrite ^/t.gif$ /track.gif break;
		rewrite ^/d$ /data break;
		rewrite ^/u.(js|json|txt)$ /uuid.$1 break;
		rewrite ^/r/(.+)$ /redirect/$1 break;
		rewrite ^/r2/(.+)$ /redirect302/$1 break;

		#if you want to pass an id...
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})(/(e|empty)\.gif)?$' /empty.gif break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/(p|pixel).gif$' /pixel.gif break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/(t|track).gif$' /track.gif break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/(u|uuid).(js|json|txt)$' /uuid.$3 break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/r/(.+)$' /redirect/$2 break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/r2/(.+)$' /redirect302/$2 break;
		rewrite '^/(?<id>[0-9a-zA-Z\-\_]{2,64})/data$' /data break;


		#security advisory http://mailman.nginx.org/pipermail/nginx-announce/2013/000125.html
	    if ($request_uri ~ " ") {
	        return 444;
	    } 

		#for filtering request... you could use a shared dict
		access_by_lua '
			common.access_filter()           	
		';

		#dont log location		
		location @nolog {
			access_log off;
			return 204;
		}
		

		#I would put a redirect here to your main application.
		location = / {
			access_log off;
			echo "OK";
		}
		
		#empty pixel
		location = /pixel.gif {
			header_filter_by_lua '
				common.pixel_headers()
			';	
			empty_gif;
		}
		
		#empty pixel that returns an etag header
		location = /track.gif {
			if_modified_since off;
			add_header Last-Modified "";

			header_filter_by_lua '
				common.track_headers()
			';

			empty_gif;
		}
		
		#returns a 204
		location = /empty.gif {
			add_header Content-Type image/gif;
			content_by_lua '
				common.empty_headers()
				common.empty_content() 	
			';
		}

		#returns the uuid as a json file
		location = /uuid.json {
			set $type 'json';
		
			content_by_lua '
				common.json_headers()
				common.json_content()
			';
		}
		
		#returns the uuid as a js file
		location = /uuid.js {
			set $type 'javascript';
		
			content_by_lua '
				common.js_headers()
				common.js_content()
			';
		}
		
		#returns the uuid as a text file
		location = /uuid.txt {
			set $type 'text';

			content_by_lua '
				common.txt_headers()
				common.txt_content()
			';
		}		
		
		#send a 301 redirect
		location ~ /redirect/(?<redirect_scheme>http(s)?):/(?<redirect_url>.+)$ {
			set $type 'redirect';

			access_by_lua '
				common.redirect_access()
			';
		
			content_by_lua '
				common.redirect_headers()
				common.redirect_content()
			';
		}
		
		#send a 302 redirect
		location ~ /redirect302/(?<redirect_scheme>http(s)?):/(?<redirect_url>.+) {
			set $type 'redirect';

			access_by_lua '
				common.redirect_access()
			';
		
			content_by_lua '
				common.redirect_headers()
				common.redirect_content(ngx.HTTP_MOVED_TEMPORARILY)
			';
		}				
		
		#capture a post
		location = /data {  
			set $type 'data';

			header_filter_by_lua '
				common.data_headers()
			';
			
		    # add the proper port or IP address if Nginx is not on 127.0.0.1:80
			proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_redirect off;		    
		    proxy_pass http://127.0.0.1:6090/process_data; 
    		echo_read_request_body;
		}
		
	}
    
    #backend process for catching post...
    server {
		listen	6090;
		server_name	localhost;
		access_log     off;
		
		
		location /ping {
			echo "pong";
		}
		
		
		location = /process_data {
		    add_header Access-Control-Allow-Origin *;
			return 204;
		}
		
	}
}

